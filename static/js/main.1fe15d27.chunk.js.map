{"version":3,"sources":["store/model.js","store/index.js","screens/intro.js","components/user.js","screens/wish.js","screens/home.js","App.js","reportWebVitals.js","index.js"],"names":["url","model","loading","setLoading","action","state","payload","userKey","undefined","setUserKey","sendLoadDataRequest","thunk","actions","helpers","a","getState","axios","post","data","setOrderedGachaTypes","orderedGachaTypes","gachaLogs","updateGachaLogs","getGachaLogs","key","store","createStore","Title","Typography","Paragraph","Text","Introduction","Link","span","className","User","useStoreState","useStoreActions","onClick","RenderTableResult","length","dataSource","columns","title","dataIndex","Wish","grid","gutter","column","itemLayout","renderItem","item","Item","name","Header","Layout","Content","Footer","HomeScreen","spinning","direction","theme","mode","defaultSelectedKeys","accept","beforeUpload","file","reader","FileReader","readAsText","onload","e","arr","target","result","match","replace","icon","UploadOutlined","plain","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe15d27.chunk.js","sourcesContent":["import { action, thunk } from \"easy-peasy\";\nimport axios from \"axios\";\n\nconst url = \"https://genshin-gacha-logs.herokuapp.com\";\nconst model = {\n  loading: false,\n  setLoading: action((state, payload) => {\n    state.loading = payload;\n  }),\n  userKey: undefined,\n  setUserKey: action((state, payload) => {\n    state.userKey = payload;\n  }),\n  sendLoadDataRequest: thunk(async (actions, payload, helpers) => {\n    actions.setLoading(true);\n    const { userKey } = helpers.getState();\n    const { data } = await axios.post(`${url}/load-data`, {\n      userKey: userKey,\n    });\n    actions.setOrderedGachaTypes(data);\n    actions.setLoading(false);\n  }),\n  orderedGachaTypes: [\n    // { id: \"15\", key: \"301\", name: \"Cầu Nguyện Nhân Vật\" },\n    // { id: \"16\", key: \"302\", name: \"Cầu Nguyện Vũ Khí\" },\n    // { id: \"14\", key: \"200\", name: \"Cầu Nguyện Thường\" },\n    // { id: \"4\", key: \"100\", name: \"Cầu Nguyện Tân Thủ\" },\n  ],\n  setOrderedGachaTypes: action((state, payload) => {\n    state.orderedGachaTypes = payload;\n  }),\n  gachaLogs: [],\n  updateGachaLogs: action((state, payload) => {\n    state.gachaLogs = payload;\n  }),\n  getGachaLogs: thunk(async (actions, payload, helpers) => {\n    actions.setLoading(true);\n    const { userKey } = helpers.getState();\n    const { data } = await axios.post(`${url}/get-gacha-logs`, {\n      key: payload,\n      url: userKey,\n    });\n    actions.updateGachaLogs(data);\n    actions.setLoading(false);\n  }),\n};\n\nexport default model;\n","import { createStore } from \"easy-peasy\";\nimport model from \"./model\";\n\nconst store = createStore({ model });\n\nexport default store;\n","import { Typography, Divider, Row, Col, Space } from \"antd\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\n\nconst Introduction = () => {\n  return (\n    <Typography>\n      <Title>Hướng dẫn sử dụng</Title>\n      <Paragraph>\n        <>\n          <Row>\n            <Col span={8}></Col>\n            <Col span={8}>\n              <Paragraph className=\"Paragraph-left\">\n                <Text>\n                  {\" \"}\n                  <strong>Bước 1:</strong> Vào màn hình gacha của game trên PC.\n                </Text>\n              </Paragraph>\n              <Paragraph className=\"Paragraph-left\">\n                <Text>\n                  {\" \"}\n                  <strong>Bước 2:</strong> Copy file ra Desktop{\" \"}\n                </Text>\n              </Paragraph>\n              <Paragraph className=\"Paragraph-left\">\n                <Text>\n                  userPath/AppData/LocalLow/miHoYo/name/output_log.txt\n                </Text>\n              </Paragraph>\n              <Paragraph className=\"Paragraph-left\">\n                <Text>\n                  <strong>Bước 3:</strong> Upload file lên và xem kết quả.\n                </Text>\n              </Paragraph>\n            </Col>\n            <Col span={8}></Col>\n          </Row>\n        </>\n      </Paragraph>\n    </Typography>\n  );\n};\n\nexport default Introduction;\n","import React, { useState } from \"react\";\nimport {\n  Layout,\n  Menu,\n  Space,\n  Upload,\n  Button,\n  Typography,\n  Row,\n  Col,\n} from \"antd\";\n\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nconst { Text } = Typography;\n\nconst User = () => {\n  const userKey = useStoreState((state) => state.model.userKey);\n  const sendLoadDataRequest = useStoreActions(\n    (actions) => actions.model.sendLoadDataRequest\n  );\n  if (userKey !== null && userKey !== undefined && userKey !== \"\") {\n    return (\n      <Button\n        onClick={() => {\n          sendLoadDataRequest(userKey);\n        }}\n      >\n        Load Your Data\n      </Button>\n    );\n  } else {\n    return <>{/* <Text>Failed to load user key from log file</Text> */}</>;\n  }\n};\n\nexport default User;\n","import React from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport { List, Button, Table } from \"antd\";\nconst Wish = () => {\n  const orderedGachaTypes = useStoreState(\n    (state) => state.model.orderedGachaTypes\n  );\n  const getGachaLogs = useStoreActions((actions) => actions.model.getGachaLogs);\n  const gachaLogs = useStoreState((state) => state.model.gachaLogs);\n  return (\n    <>\n      <List\n        grid={{ gutter: 16, column: 4 }}\n        itemLayout=\"vertical\"\n        dataSource={orderedGachaTypes}\n        renderItem={(item) => (\n          <List.Item>\n            <Button\n              onClick={() => {\n                getGachaLogs(item.key);\n              }}\n            >\n              {item.name}\n            </Button>\n          </List.Item>\n        )}\n      />\n      <RenderTableResult gachaLogs={gachaLogs}></RenderTableResult>\n    </>\n  );\n};\n\nconst RenderTableResult = ({ gachaLogs }) => {\n  const columns = [\n    {\n      title: \"UID\",\n      dataIndex: \"uid\",\n      key: \"uid\",\n    },\n    {\n      title: \"Gacha types\",\n      dataIndex: \"gacha_type\",\n      key: \"gacha_type\",\n    },\n    {\n      title: \"Item Id\",\n      dataIndex: \"item_id\",\n      key: \"item_id\",\n    },\n    {\n      title: \"Count\",\n      dataIndex: \"count\",\n      key: \"count\",\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"time\",\n      key: \"time\",\n    },\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Item Type\",\n      dataIndex: \"item_type\",\n      key: \"item_type\",\n    },\n    {\n      title: \"Rank Type\",\n      dataIndex: \"rank_type\",\n      key: \"rank_type\",\n    },\n  ];\n  if (gachaLogs.length > 0) {\n    return <Table dataSource={gachaLogs} columns={columns} />;\n  } else {\n    return <></>;\n  }\n};\nexport default Wish;\n","import React, { useState } from \"react\";\nimport {\n  Layout,\n  Menu,\n  Space,\n  Upload,\n  Button,\n  Typography,\n  Row,\n  Col,\n  Divider,\n  Spin,\n} from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport Introduction from \"./intro\";\nimport User from \"../components/user\";\nimport { useStoreState, useStoreActions } from \"easy-peasy\";\nimport Wish from \"../screens/wish\";\nconst { Header, Content, Footer } = Layout;\nconst { Title, Paragraph, Text, Link } = Typography;\n\nconst HomeScreen = () => {\n  // const [userKey, setUserKey] = useState(\"\");\n  const userKey = useStoreState((state) => state.model.userKey);\n  const setUserKey = useStoreActions((actions) => actions.model.setUserKey);\n  const loading = useStoreState((state) => state.model.loading);\n  return (\n    <Spin spinning={loading}>\n      <Layout>\n        <Space direction=\"vertical\">\n          <Header>\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n              <Menu.Item key=\"1\">Genshin Gacha Logs</Menu.Item>\n              <Menu.Item key=\"2\">Mua Account</Menu.Item>\n            </Menu>\n          </Header>\n          <Content>\n            <Introduction></Introduction>\n            <Row>\n              <Col span={8}></Col>\n              <Col span={8}>\n                <Upload\n                  accept=\".txt\"\n                  beforeUpload={(file) => {\n                    const reader = new FileReader();\n                    reader.readAsText(file);\n                    reader.onload = (e) => {\n                      let logText = e.target.result;\n                      let arr = logText.match(\n                        /^OnGetWebViewPageFinish:https:\\/\\/.+\\?.+?(?:#.+)?$/gm\n                      );\n                      if (arr && arr.length) {\n                        let url = arr[arr.length - 1].replace(\n                          \"OnGetWebViewPageFinish:\",\n                          \"\"\n                        );\n                        // let index = url.indexOf(\"authkey_ver\");\n                        // let tmp = url.substring(index, url.length);\n                        // console.log(tmp);\n                        setUserKey(url);\n                      }\n                    };\n                  }}\n                >\n                  <Button icon={<UploadOutlined />}>Click to Upload</Button>\n                </Upload>\n              </Col>\n              <Col span={8}></Col>\n            </Row>\n            <Divider plain> User section </Divider>\n            <User />\n            <Divider plain> Wish section</Divider>\n            <Wish />\n          </Content>\n          <Footer></Footer>\n        </Space>\n      </Layout>\n    </Spin>\n  );\n};\n\nexport default HomeScreen;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport \"./App.css\";\nimport { StoreProvider } from \"easy-peasy\";\nimport store from \"./store/index\";\nimport HomeScreen from \"./screens/home\";\n\nconst App = () => (\n  <StoreProvider store={store}>\n    <div className=\"App\">\n      <HomeScreen></HomeScreen>\n    </div>\n  </StoreProvider>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}